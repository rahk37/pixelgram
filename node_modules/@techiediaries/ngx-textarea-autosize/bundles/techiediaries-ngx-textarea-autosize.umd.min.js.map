{"version":3,"sources":["ng://@techiediaries/ngx-textarea-autosize/lib/window-ref.service.ts","ng://@techiediaries/ngx-textarea-autosize/lib/autosize.directive.ts","ng://@techiediaries/ngx-textarea-autosize/lib/autosize.module.ts"],"names":["WindowRef","Object","defineProperty","prototype","window","Injectable","args","providedIn","AutosizeDirective","element","_window","_zone","this","onlyGrow","useImportant","resized","EventEmitter","retries","_destroyed","nativeElement","tagName","_findNestedTextArea","textAreaEl","style","overflow","_onTextAreaFound","value","_minRows","rows","onInput","textArea","adjust","ngOnDestroy","_windowResizeHandler","nativeWindow","removeEventListener","ngAfterContentChecked","ngOnChanges","changes","_this","querySelector","shadowRoot","console","warn","setTimeout","_addWindowResizeHandler","func","wait","immediate","timeout","context","arguments","later","apply","callNow","clearTimeout","Debounce","run","runOutsideAngular","addEventListener","inputsChanged","parentNode","currentText","_oldContent","offsetWidth","_oldWidth","clone","cloneNode","parent_1","width","visibility","position","textContent","appendChild","height","scrollHeight","computedStyle","getComputedStyle","parseInt","getPropertyValue","oldHeight","offsetHeight","willGrow","lineHeight","_getLineHeight","rowsCount","maxRows","maxHeight","Math","max","heightStyle","important","setProperty","emit","removeChild","isNaN","styles","fontSize","floor","replace","Directive","selector","ElementRef","NgZone","Input","Output","HostListener","AutosizeModule","NgModule","declarations","imports","providers","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WindowRef {\n  get nativeWindow(): any {\n    return window;\n  }\n}\n","import {\n    ElementRef,\n    HostListener,\n    Directive,\n    Input,\n    NgZone, OnDestroy, OnChanges, AfterContentChecked, Output, EventEmitter\n} from '@angular/core';\nimport {WindowRef} from './window-ref.service';\n\nconst MAX_LOOKUP_RETRIES = 3;\n\n@Directive({\n    selector: '[autosize]'\n})\n\nexport class AutosizeDirective implements OnDestroy, OnChanges, AfterContentChecked {\n    @Input()\n    set minRows(value) {\n        this._minRows = value;\n        if (this.textAreaEl) {\n            this.textAreaEl.rows = value;\n        }\n    };\n    private _minRows: number;\n\n    @Input() maxRows: number;\n    @Input() onlyGrow = false;\n    @Input() useImportant = false;\n\n    @Output() resized = new EventEmitter<number>();\n\n    private retries = 0;\n    private textAreaEl: any;\n\n    private _oldContent: string;\n    private _oldWidth: number;\n\n    private _windowResizeHandler;\n    private _destroyed = false;\n\n    @HostListener('input', ['$event.target'])\n    onInput(textArea: HTMLTextAreaElement): void {\n        this.adjust();\n    }\n\n    constructor(\n        public element: ElementRef,\n        private _window: WindowRef,\n        private _zone: NgZone\n    ) {\n        if (this.element.nativeElement.tagName !== 'TEXTAREA') {\n            this._findNestedTextArea();\n\n        } else {\n            this.textAreaEl = this.element.nativeElement;\n            this.textAreaEl.style.overflow = 'hidden';\n            this._onTextAreaFound();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed = true;\n        if (this._windowResizeHandler) {\n            this._window.nativeWindow.removeEventListener('resize', this._windowResizeHandler, false);\n        }\n    }\n\n    ngAfterContentChecked() {\n        this.adjust();\n    }\n\n    ngOnChanges(changes) {\n        this.adjust(true);\n    }\n\n    _findNestedTextArea() {\n        this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');\n\n        if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {\n            this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');\n        }\n\n        if (!this.textAreaEl) {\n            if (this.retries >= MAX_LOOKUP_RETRIES) {\n                console.warn('ngx-autosize: textarea not found');\n\n            } else {\n                this.retries++;\n                setTimeout(() => {\n                    this._findNestedTextArea();\n                }, 100);\n            }\n            return;\n        }\n\n        this.textAreaEl.style.overflow = 'hidden';\n        this._onTextAreaFound();\n\n    }\n\n    _onTextAreaFound() {\n        this._addWindowResizeHandler();\n        setTimeout(() => {\n            this.adjust();\n        });\n    }\n\n    _addWindowResizeHandler() {\n        this._windowResizeHandler = Debounce(() => {\n            this._zone.run(() => {\n                this.adjust();\n            });\n        }, 200);\n\n        this._zone.runOutsideAngular(() => {\n            this._window.nativeWindow.addEventListener('resize', this._windowResizeHandler, false);\n        });\n    }\n\n    adjust(inputsChanged = false): void {\n        if (!this._destroyed && this.textAreaEl && this.textAreaEl.parentNode) {\n\n            const currentText = this.textAreaEl.value;\n\n            if (\n                inputsChanged === false &&\n                currentText === this._oldContent &&\n                this.textAreaEl.offsetWidth === this._oldWidth\n            ) {\n                return;\n            }\n\n            this._oldContent = currentText;\n            this._oldWidth = this.textAreaEl.offsetWidth;\n\n            const clone = this.textAreaEl.cloneNode(true);\n            const parent = this.textAreaEl.parentNode;\n            clone.style.width = this.textAreaEl.offsetWidth + 'px';\n            clone.style.visibility = 'hidden';\n            clone.style.position = 'absolute';\n            clone.textContent = currentText;\n\n            parent.appendChild(clone);\n\n            clone.style.overflow = 'hidden';\n            clone.style.height = 'auto';\n\n            let height = clone.scrollHeight;\n\n            // add into height top and bottom borders' width\n            let computedStyle = this._window.nativeWindow.getComputedStyle(clone, null);\n            height += parseInt(computedStyle.getPropertyValue('border-top-width'));\n            height += parseInt(computedStyle.getPropertyValue('border-bottom-width'));\n\n            const oldHeight = this.textAreaEl.offsetHeight;\n            const willGrow = height > oldHeight;\n\n            if (this.onlyGrow === false || willGrow) {\n                const lineHeight = this._getLineHeight();\n                const rowsCount = height / lineHeight;\n\n                if (this._minRows && this._minRows >= rowsCount) {\n                    height = this._minRows * lineHeight;\n\n                } else if (this.maxRows && this.maxRows <= rowsCount) {\n                    // never shrink the textarea if onlyGrow is true\n                    const maxHeight = this.maxRows * lineHeight;\n                    height = this.onlyGrow ? Math.max(maxHeight, oldHeight): maxHeight;\n                    this.textAreaEl.style.overflow = 'auto';\n\n                } else {\n                    this.textAreaEl.style.overflow = 'hidden';\n                }\n\n                const heightStyle = height + 'px';\n                const important = this.useImportant ? 'important' : '';\n\n                this.textAreaEl.style.setProperty('height', heightStyle, important);\n\n                this.resized.emit(height);\n            }\n\n            parent.removeChild(clone);\n        }\n    }\n\n    private _getLineHeight() {\n        let lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);\n        if (isNaN(lineHeight) && this._window.nativeWindow.getComputedStyle) {\n            const styles = this._window.nativeWindow.getComputedStyle(this.textAreaEl);\n            lineHeight = parseInt(styles.lineHeight, 10);\n        }\n\n        if (isNaN(lineHeight)) {\n            const fontSize = this._window.nativeWindow.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');\n            lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);\n        }\n\n        return lineHeight;\n    }\n}\n\nfunction Debounce(func, wait, immediate = false) {\n    let timeout;\n    return function () {\n        const context = this;\n        const args = arguments;\n        const later = function () {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n","import {NgModule} from '@angular/core';\nimport {AutosizeDirective} from './autosize.directive';\nimport {WindowRef} from './window-ref.service';\n\n@NgModule({\n    declarations: [AutosizeDirective],\n    imports: [],\n    providers: [\n        WindowRef\n    ],\n    exports: [AutosizeDirective]\n})\nexport class AutosizeModule {\n}\n"]}