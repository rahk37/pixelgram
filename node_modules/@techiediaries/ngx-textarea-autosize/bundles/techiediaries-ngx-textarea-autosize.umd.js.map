{"version":3,"file":"techiediaries-ngx-textarea-autosize.umd.js","sources":["ng://@techiediaries/ngx-textarea-autosize/lib/window-ref.service.ts","ng://@techiediaries/ngx-textarea-autosize/lib/autosize.directive.ts","ng://@techiediaries/ngx-textarea-autosize/lib/autosize.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WindowRef {\n  get nativeWindow(): any {\n    return window;\n  }\n}\n","import {\n    ElementRef,\n    HostListener,\n    Directive,\n    Input,\n    NgZone, OnDestroy, OnChanges, AfterContentChecked, Output, EventEmitter\n} from '@angular/core';\nimport {WindowRef} from './window-ref.service';\n\nconst MAX_LOOKUP_RETRIES = 3;\n\n@Directive({\n    selector: '[autosize]'\n})\n\nexport class AutosizeDirective implements OnDestroy, OnChanges, AfterContentChecked {\n    @Input()\n    set minRows(value) {\n        this._minRows = value;\n        if (this.textAreaEl) {\n            this.textAreaEl.rows = value;\n        }\n    };\n    private _minRows: number;\n\n    @Input() maxRows: number;\n    @Input() onlyGrow = false;\n    @Input() useImportant = false;\n\n    @Output() resized = new EventEmitter<number>();\n\n    private retries = 0;\n    private textAreaEl: any;\n\n    private _oldContent: string;\n    private _oldWidth: number;\n\n    private _windowResizeHandler;\n    private _destroyed = false;\n\n    @HostListener('input', ['$event.target'])\n    onInput(textArea: HTMLTextAreaElement): void {\n        this.adjust();\n    }\n\n    constructor(\n        public element: ElementRef,\n        private _window: WindowRef,\n        private _zone: NgZone\n    ) {\n        if (this.element.nativeElement.tagName !== 'TEXTAREA') {\n            this._findNestedTextArea();\n\n        } else {\n            this.textAreaEl = this.element.nativeElement;\n            this.textAreaEl.style.overflow = 'hidden';\n            this._onTextAreaFound();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed = true;\n        if (this._windowResizeHandler) {\n            this._window.nativeWindow.removeEventListener('resize', this._windowResizeHandler, false);\n        }\n    }\n\n    ngAfterContentChecked() {\n        this.adjust();\n    }\n\n    ngOnChanges(changes) {\n        this.adjust(true);\n    }\n\n    _findNestedTextArea() {\n        this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');\n\n        if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {\n            this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');\n        }\n\n        if (!this.textAreaEl) {\n            if (this.retries >= MAX_LOOKUP_RETRIES) {\n                console.warn('ngx-autosize: textarea not found');\n\n            } else {\n                this.retries++;\n                setTimeout(() => {\n                    this._findNestedTextArea();\n                }, 100);\n            }\n            return;\n        }\n\n        this.textAreaEl.style.overflow = 'hidden';\n        this._onTextAreaFound();\n\n    }\n\n    _onTextAreaFound() {\n        this._addWindowResizeHandler();\n        setTimeout(() => {\n            this.adjust();\n        });\n    }\n\n    _addWindowResizeHandler() {\n        this._windowResizeHandler = Debounce(() => {\n            this._zone.run(() => {\n                this.adjust();\n            });\n        }, 200);\n\n        this._zone.runOutsideAngular(() => {\n            this._window.nativeWindow.addEventListener('resize', this._windowResizeHandler, false);\n        });\n    }\n\n    adjust(inputsChanged = false): void {\n        if (!this._destroyed && this.textAreaEl && this.textAreaEl.parentNode) {\n\n            const currentText = this.textAreaEl.value;\n\n            if (\n                inputsChanged === false &&\n                currentText === this._oldContent &&\n                this.textAreaEl.offsetWidth === this._oldWidth\n            ) {\n                return;\n            }\n\n            this._oldContent = currentText;\n            this._oldWidth = this.textAreaEl.offsetWidth;\n\n            const clone = this.textAreaEl.cloneNode(true);\n            const parent = this.textAreaEl.parentNode;\n            clone.style.width = this.textAreaEl.offsetWidth + 'px';\n            clone.style.visibility = 'hidden';\n            clone.style.position = 'absolute';\n            clone.textContent = currentText;\n\n            parent.appendChild(clone);\n\n            clone.style.overflow = 'hidden';\n            clone.style.height = 'auto';\n\n            let height = clone.scrollHeight;\n\n            // add into height top and bottom borders' width\n            let computedStyle = this._window.nativeWindow.getComputedStyle(clone, null);\n            height += parseInt(computedStyle.getPropertyValue('border-top-width'));\n            height += parseInt(computedStyle.getPropertyValue('border-bottom-width'));\n\n            const oldHeight = this.textAreaEl.offsetHeight;\n            const willGrow = height > oldHeight;\n\n            if (this.onlyGrow === false || willGrow) {\n                const lineHeight = this._getLineHeight();\n                const rowsCount = height / lineHeight;\n\n                if (this._minRows && this._minRows >= rowsCount) {\n                    height = this._minRows * lineHeight;\n\n                } else if (this.maxRows && this.maxRows <= rowsCount) {\n                    // never shrink the textarea if onlyGrow is true\n                    const maxHeight = this.maxRows * lineHeight;\n                    height = this.onlyGrow ? Math.max(maxHeight, oldHeight): maxHeight;\n                    this.textAreaEl.style.overflow = 'auto';\n\n                } else {\n                    this.textAreaEl.style.overflow = 'hidden';\n                }\n\n                const heightStyle = height + 'px';\n                const important = this.useImportant ? 'important' : '';\n\n                this.textAreaEl.style.setProperty('height', heightStyle, important);\n\n                this.resized.emit(height);\n            }\n\n            parent.removeChild(clone);\n        }\n    }\n\n    private _getLineHeight() {\n        let lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);\n        if (isNaN(lineHeight) && this._window.nativeWindow.getComputedStyle) {\n            const styles = this._window.nativeWindow.getComputedStyle(this.textAreaEl);\n            lineHeight = parseInt(styles.lineHeight, 10);\n        }\n\n        if (isNaN(lineHeight)) {\n            const fontSize = this._window.nativeWindow.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');\n            lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);\n        }\n\n        return lineHeight;\n    }\n}\n\nfunction Debounce(func, wait, immediate = false) {\n    let timeout;\n    return function () {\n        const context = this;\n        const args = arguments;\n        const later = function () {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n","import {NgModule} from '@angular/core';\nimport {AutosizeDirective} from './autosize.directive';\nimport {WindowRef} from './window-ref.service';\n\n@NgModule({\n    declarations: [AutosizeDirective],\n    imports: [],\n    providers: [\n        WindowRef\n    ],\n    exports: [AutosizeDirective]\n})\nexport class AutosizeModule {\n}\n"],"names":["Injectable","EventEmitter","Directive","ElementRef","NgZone","Input","Output","HostListener","NgModule"],"mappings":";;;;;;;;;;AAAA;QAEA;SAOC;QAHC,sBAAI,mCAAY;;;;YAAhB;gBACE,OAAO,MAAM,CAAC;aACf;;;WAAA;;oBANFA,eAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;wBAJD;KAEA;;;;;;ICFA;QASM,kBAAkB,GAAG,CAAC;AAE5B;QAkCI,2BACW,OAAmB,EAClB,OAAkB,EAClB,KAAa;YAFd,YAAO,GAAP,OAAO,CAAY;YAClB,YAAO,GAAP,OAAO,CAAW;YAClB,UAAK,GAAL,KAAK,CAAQ;YAtBhB,aAAQ,GAAG,KAAK,CAAC;YACjB,iBAAY,GAAG,KAAK,CAAC;YAEpB,YAAO,GAAG,IAAIC,iBAAY,EAAU,CAAC;YAEvC,YAAO,GAAG,CAAC,CAAC;YAOZ,eAAU,GAAG,KAAK,CAAC;YAYvB,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,KAAK,UAAU,EAAE;gBACnD,IAAI,CAAC,mBAAmB,EAAE,CAAC;aAE9B;iBAAM;gBACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;gBAC7C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC1C,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAC3B;SACJ;QA1CD,sBACI,sCAAO;;;;;YADX,UACY,KAAK;gBACb,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,KAAK,CAAC;iBAChC;aACJ;;;WAAA;QAAA,CAAC;;;;;QAmBF,mCAAO;;;;QADP,UACQ,QAA6B;YACjC,IAAI,CAAC,MAAM,EAAE,CAAC;SACjB;;;;QAiBD,uCAAW;;;QAAX;YACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,IAAI,CAAC,oBAAoB,EAAE;gBAC3B,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;aAC7F;SACJ;;;;QAED,iDAAqB;;;QAArB;YACI,IAAI,CAAC,MAAM,EAAE,CAAC;SACjB;;;;;QAED,uCAAW;;;;QAAX,UAAY,OAAO;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACrB;;;;QAED,+CAAmB;;;QAAnB;YAAA,iBAuBC;YAtBG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAEvE,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE;gBAC3D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aACrF;YAED,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBAClB,IAAI,IAAI,CAAC,OAAO,IAAI,kBAAkB,EAAE;oBACpC,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;iBAEpD;qBAAM;oBACH,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,UAAU;;;oBAAC;wBACP,KAAI,CAAC,mBAAmB,EAAE,CAAC;qBAC9B,GAAE,GAAG,CAAC,CAAC;iBACX;gBACD,OAAO;aACV;YAED,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC1C,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAE3B;;;;QAED,4CAAgB;;;QAAhB;YAAA,iBAKC;YAJG,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC/B,UAAU;;;YAAC;gBACP,KAAI,CAAC,MAAM,EAAE,CAAC;aACjB,EAAC,CAAC;SACN;;;;QAED,mDAAuB;;;QAAvB;YAAA,iBAUC;YATG,IAAI,CAAC,oBAAoB,GAAG,QAAQ;;;YAAC;gBACjC,KAAI,CAAC,KAAK,CAAC,GAAG;;;gBAAC;oBACX,KAAI,CAAC,MAAM,EAAE,CAAC;iBACjB,EAAC,CAAC;aACN,GAAE,GAAG,CAAC,CAAC;YAER,IAAI,CAAC,KAAK,CAAC,iBAAiB;;;YAAC;gBACzB,KAAI,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAI,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;aAC1F,EAAC,CAAC;SACN;;;;;QAED,kCAAM;;;;QAAN,UAAO,aAAqB;YAArB,8BAAA,EAAA,qBAAqB;YACxB,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;;oBAE7D,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK;gBAEzC,IACI,aAAa,KAAK,KAAK;oBACvB,WAAW,KAAK,IAAI,CAAC,WAAW;oBAChC,IAAI,CAAC,UAAU,CAAC,WAAW,KAAK,IAAI,CAAC,SAAS,EAChD;oBACE,OAAO;iBACV;gBAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;gBAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;;oBAEvC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;;oBACvC,QAAM,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU;gBACzC,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC;gBACvD,KAAK,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAClC,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;gBAClC,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;gBAEhC,QAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAE1B,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAChC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;;oBAExB,MAAM,GAAG,KAAK,CAAC,YAAY;;;oBAG3B,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC;gBAC3E,MAAM,IAAI,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACvE,MAAM,IAAI,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,CAAC;;oBAEpE,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY;;oBACxC,QAAQ,GAAG,MAAM,GAAG,SAAS;gBAEnC,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,IAAI,QAAQ,EAAE;;wBAC/B,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE;;wBAClC,SAAS,GAAG,MAAM,GAAG,UAAU;oBAErC,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,SAAS,EAAE;wBAC7C,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;qBAEvC;yBAAM,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,SAAS,EAAE;;;4BAE5C,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,UAAU;wBAC3C,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,GAAE,SAAS,CAAC;wBACnE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;qBAE3C;yBAAM;wBACH,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;qBAC7C;;wBAEK,WAAW,GAAG,MAAM,GAAG,IAAI;;wBAC3B,SAAS,GAAG,IAAI,CAAC,YAAY,GAAG,WAAW,GAAG,EAAE;oBAEtD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;oBAEpE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC7B;gBAED,QAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aAC7B;SACJ;;;;;QAEO,0CAAc;;;;QAAtB;;gBACQ,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC;YAC/D,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,EAAE;;oBAC3D,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC1E,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;aAChD;YAED,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE;;oBACb,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC;gBAChH,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;aAC3E;YAED,OAAO,UAAU,CAAC;SACrB;;oBA5LJC,cAAS,SAAC;wBACP,QAAQ,EAAE,YAAY;qBACzB;;;;oBAZGC,eAAU;oBAMN,SAAS;oBAFbC,WAAM;;;8BAWLC,UAAK;8BASLA,UAAK;+BACLA,UAAK;mCACLA,UAAK;8BAELC,WAAM;8BAWNC,iBAAY,SAAC,OAAO,EAAE,CAAC,eAAe,CAAC;;QAgK5C,wBAAC;KA7LD,IA6LC;;;;;;QAjLG,qCAAyB;;QAEzB,oCAAyB;;QACzB,qCAA0B;;QAC1B,yCAA8B;;QAE9B,oCAA+C;;;;;QAE/C,oCAAoB;;;;;QACpB,uCAAwB;;;;;QAExB,wCAA4B;;;;;QAC5B,sCAA0B;;;;;QAE1B,iDAA6B;;;;;QAC7B,uCAA2B;;QAQvB,oCAA0B;;;;;QAC1B,oCAA0B;;;;;QAC1B,kCAAqB;;;;;;;;;IA0J7B,SAAS,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,SAAiB;QAAjB,0BAAA,EAAA,iBAAiB;;YACvC,OAAO;QACX;;;QAAO;;gBACG,OAAO,GAAG,IAAI;;gBACd,IAAI,GAAG,SAAS;;gBAChB,KAAK;;;YAAG;gBACV,OAAO,GAAG,IAAI,CAAC;gBACf,IAAI,CAAC,SAAS,EAAE;oBACZ,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;iBAC7B;aACJ,CAAA;;gBACK,OAAO,GAAG,SAAS,IAAI,CAAC,OAAO;YACrC,YAAY,CAAC,OAAO,CAAC,CAAC;YACtB,OAAO,GAAG,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAClC,IAAI,OAAO,EAAE;gBACT,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aAC7B;SACJ,EAAC;KACL;;;;;;AC5ND;QAIA;SASC;;oBATAC,aAAQ,SAAC;wBACN,YAAY,EAAE,CAAC,iBAAiB,CAAC;wBACjC,OAAO,EAAE,EAAE;wBACX,SAAS,EAAE;4BACP,SAAS;yBACZ;wBACD,OAAO,EAAE,CAAC,iBAAiB,CAAC;qBAC/B;;QAED,qBAAC;KATD;;;;;;;;;;;;;;"}